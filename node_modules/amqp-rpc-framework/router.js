const amqp = require('amqplib')
const reply = require('amqplib-rpc').reply;

/*

const asyn

*/

class MessageRouter {
    constructor() {
        this.procedureTable = new Map()
    }

    setHandler(procedure, callback) {
        this.procedureTable.set(procedure, callback);
    }

    getHandler(procedure) {
        return this.procedureTable.get(procedure);
    }

    async listen(url, queue) {
        const connection = await amqp.connect(url);
        const consumerChannel = await connection.createChannel();
        const publisherChannel = await connection.createChannel()

        await consumerChannel.assertQueue(queue);
        consumerChannel.consume(queue, async (message) => {
            const req = JSON.parse(message.content.toString());
            const procedure = this.procedureTable.get(req.procedure);
            try {
                if (!procedure) {
                    reply(publisherChannel, message, JSON.stringify({
                        error: `function ${procedure} is not specified`
                    }).toString())
                } else {
                    reply(publisherChannel, message, JSON.stringify(await procedure(req.args)).toString())
                }
            } catch(e) {
                reply(publisherChannel, message, JSON.stringify({
                    error: e.message
                }).toString())
            }
            consumerChannel.ack(message)
        });
    }
}

module.exports = MessageRouter